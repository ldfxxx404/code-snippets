{
  "Basic React component with import": {
    "scope": "typescriptreact,javacriptreact",
    "prefix": "rafc",
    "body": [
      "import { HTMLAttributes } from \"react\";",
      "",
      "interface ${TM_FILENAME_BASE}Props extends HTMLAttributes<HTMLDivElement>{}",
      "",
      "export const ${TM_FILENAME_BASE} = ({}: ${TM_FILENAME_BASE}Props) => {",
      " return <div></div>;",
      "}"
    ]
  },
  "Basic React component with Ref abd import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafcref",
    "body": [
      "import { forwardRef, HTMLAttributes } from 'react';",
      "",
      "export const ${TM_FILENAME_BASE} = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(",
      "  ({}, ref) => {",
      "    return <div ref={ref}></div>;",
      "  }",
      ");",
      "",
      "${TM_FILENAME_BASE}.displayName = \"${TM_FILENAME_BASE}\";"
    ]
  },
  "Basic React Icon component and import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafci",
    "body": [
      "import { SVGProps } from \"react\";",
      "import { twMerge } from \"tailwind-merge\";",
      "",
      "export const ${TM_FILENAME_BASE} = ({ className, ...props }: SVGProps<SVGSVGElement>) => (",
      "  <svg",
      "    className={twMerge(\"fill-current\", className)}",
      "    {...props}",
      "  ></svg>",
      ")",
    ]
  },
  "Basic React Icon component with Ref and import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafciref",
    "body": [
      "import { SVGProps, forwardRef } from \"react\";",
      "import { twMerge } from \"tailwind-merge\";",
      "",
      "export const ${TM_FILENAME_BASE} = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(",
      "  ({ className, ...props }, ref) => (",
      "    <svg",
      "      ref={ref}",
      "      className={twMerge(\"fill-current\", className)}",
      "      {...props}",
      "    ></svg>",
      "  )",
      ");",
      "",
      "${TM_FILENAME_BASE}.displayName = \"${TM_FILENAME_BASE}\";"
    ]
  },
  "Basic React component with context and import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafctx",
    "body": [
      "import { createContext, useContext, ReactNode } from \"react\";",
      "",
      "export interface ${TM_FILENAME_BASE}ContextType {}",
      "",
      "const ${TM_FILENAME_BASE}Context = createContext<${TM_FILENAME_BASE}ContextType | undefined>(undefined);",
      "",
      "export const use${TM_FILENAME_BASE}Context = () => {",
      "  const context = useContext(${TM_FILENAME_BASE}Context);",
      "  if (!context) {",
      "    throw new Error(",
      "      'use${TM_FILENAME_BASE}Context must be used within a ${TM_FILENAME_BASE}Provider'",
      "    );",
      "  }",
      "  return context;",
      "};",
      "",
      "interface ${TM_FILENAME_BASE}ProviderProps {",
      "  children: ReactNode;",
      "}",
      "",
      "export const ${TM_FILENAME_BASE}Provider = ({ children }: ${TM_FILENAME_BASE}ProviderProps) => {",
      " return (",
      "   <${TM_FILENAME_BASE}Context.Provider value={{}}>",
      "     {children}",
      "   </${TM_FILENAME_BASE}Context.Provider>",
      " )",
      "}"
    ]
  },
  "Basic React component with cva and import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafcva",
    "body": [
      "import { cva, VariantProps } from 'class-variance-authority';",
      "import { HTMLAttributes } from 'react';",
      "import { twMerge } from 'tailwind-merge';",
      "",
      "const ${TM_FILENAME_BASE}Styles = cva('', {",
      "  variants: {",
      "    variant: {},",
      "  },",
      "});",
      "",
      "interface ${TM_FILENAME_BASE}Props",
      "  extends HTMLAttributes<HTMLDivElement>,",
      "    VariantProps<typeof ${TM_FILENAME_BASE}Styles> {}",
      "",
      "export const ${TM_FILENAME_BASE} = ({ variant, className, ...props }: ${TM_FILENAME_BASE}Props) => {",
      "  return (",
      "    <div",
      "      className={twMerge(${TM_FILENAME_BASE}Styles({ variant }), className)}",
      "      {...props}",
      "    ></div>",
      "  );",
      "};"
    ]
  },
  "Basic React component with cva and ref and import": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rafcvaref",
    "body": [
      "import { cva, VariantProps } from 'class-variance-authority';",
      "import { HTMLAttributes, forwardRef } from 'react';",
      "import { twMerge } from 'tailwind-merge';",
      "",
      "const ${TM_FILENAME_BASE}Styles = cva('', {",
      "  variants: {",
      "    variant: {},",
      "  },",
      "});",
      "",
      "interface ${TM_FILENAME_BASE}Props",
      "  extends HTMLAttributes<HTMLDivElement>,",
      "    VariantProps<typeof ${TM_FILENAME_BASE}Styles> {}",
      "",
      "export const ${TM_FILENAME_BASE} = forwardRef<HTMLDivElement, ${TM_FILENAME_BASE}Props>(({ variant, className, ...props }, ref) => {",
      "  return (",
      "    <div",
      "      ref={ref}",
      "      className={twMerge(${TM_FILENAME_BASE}Styles({ variant }), className)}",
      "      {...props}",
      "    ></div>",
      "  );",
      "})",
      "",
      "${TM_FILENAME_BASE}.displayName = \"${TM_FILENAME_BASE}\""
    ]
  },
  "React Component": {
    "scope": "typescriptreact,javacriptreact",
    "prefix": "rc",
    "body": [
      "export const Component = ({}: HTMLAttributes<HTMLDivElement>) => {",
      " return <div></div>;",
      "}"
    ]
  },
  "React Component with ref": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rcref",
    "body": [
      "export const Component = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(",
      "  ({}, ref) => {",
      "    return <div ref={ref}></div>;",
      "  }",
      ");",
      "",
      "Component.displayName = \"Component\";"
    ]
  },
  "React Icon component": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rci",
    "body": [
      "export const Component = ({ className, ...props }: SVGProps<SVGSVGElement>) => (",
      "  <svg",
      "    className={twMerge(\"fill-current\", className)}",
      "    {...props}",
      "  ></svg>",
      ")",
    ]
  },
  "React Icon Component with ref": {
    "scope": "typescriptreact,javascriptreact",
    "prefix": "rciref",
    "body": [
      "export const Component = forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>(",
      "  ({ className, ...props }, ref) => (",
      "    <svg",
      "      ref={ref}",
      "      className={twMerge(\"fill-current\", className)}",
      "      {...props}",
      "    ></svg>",
      "  )",
      ");",
      "",
      "Component.displayName = \"Component\";"
    ]
  },
  "useQuery Hook": {
    "prefix": "rq",
    "body": [
      "import { QueryOptions } from '@/api/types/react-query';",
      "import { api } from '@/api/utils/api';",
      "import { queryConfig } from '@/config';",
      "import { API_ENDPOINTS } from '@/const';",
      "import { useQuery } from '@tanstack/react-query';",
      "",
      "export const getRequest = async () => {",
      "  return await api.get<unknown>(${5:API_ENDPOINTS.GET_REQUEST();",
      "};",
      "",
      "const getQueryOptions = (",
      "  options?: QueryOptions<unknown>",
      ") => ({",
      "  queryKey: ['get'],",
      "  queryFn: async () => await getRequest(),",
      "  ...queryConfig,",
      "  ...options,",
      "});",
      "",
      "const useGetQuery = function (",
      "  options?: QueryOptions<unknown>",
      ") {",
      "  return useQuery(getQueryOptions(options));",
      "};",
      "",
      "export { getQueryOptions, useGetQuery };"
    ]
  },
  "InfiniteQuery": {
    "scope": "typescriptreact",
    "prefix": "rqi",
    "body": [
      "import {",
      "\tApiCursorParams,",
      "} from '@/api/types/cursor-pagination';",
      "import { InfiniteQueryOptions } from '@/api/types/react-query';",
      "import { ListResponse } from '@/api/types/types';",
      "import { api } from '@/api/utils/api';",
      "import {",
      "\tprepareCursorInfinitePagination,",
      "\tprepareCursorPaginationParams,",
      "} from '@/api/utils/cursor-pagination';",
      "import { queryConfig } from '@/config';",
      "import { API_ENDPOINTS } from '@/const';",
      "import { useInfiniteQuery } from '@tanstack/react-query';",
      "",
      "const getListInfiniteQueryOptions = (",
      "\tparams: ApiCursorParams<unknown>,",
      "\toptions?: InfiniteQueryOptions<ListResponse<unknow>>",
      ") => {",
      "\tconst { qs } = prepareCursorPaginationParams(params);",
      "\tconst { getNextPageParam, getPrevPageParam } = prepareCursorInfinitePagination(qs);",
      "",
      "\treturn {",
      "\t\tqueryKey: ['list_infinite', qs],",
      "\t\tqueryFn: async ({ pageParam }: { pageParam: unknown }) =>",
      "\t\t\tawait api.get<ListResponse<unknown>>(API_ENDPOINTS.LIST_RESOURCE() + '?' + (pageParam ?? qs)),",
      "\t\tgetNextPageParam: getNextPageParam,",
      "\t\tgetPreviousPageParam: (lastPage: ListResponse<unknown>) => getPrevPageParam(lastPage),",
      "\t\tinitialPageParam: qs,",
      "\t\t...queryConfig,",
      "\t\t...options,",
      "\t};",
      "};",
      "",
      "const useGetListInfiniteQuery = (",
      "\tparams: ApiCursorParams<ResourceQueryFilter>,",
      "\toptions?: InfiniteQueryOptions<ListResponse<unknown>>",
      ") => {",
      "\treturn useInfiniteQuery({",
      "\t\t...getListInfiniteQueryOptions(params, options),",
      "\t});",
      "};",
      "",
      "export { getListInfiniteQueryOptions, useGetListInfiniteQuery };"
    ]
  },
  "Mutation": {
    "scope": "typescriptreact",
    "prefix": "rqm",
    "body": [
      "import { api } from '@/api/utils/api';",
      "import { API_ENDPOINTS } from '@/const';",
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "export interface MutationPayload {}",
      "",
      "export const useMutationQuery = function () {",
      "\treturn useMutation({",
      "\t\tmutationFn: (payload: MutationPayload) =>",
      "\t\t\tapi.post(API_ENDPOINTS.MUTATION(), { body: payload }),",
      "\t});",
      "};"
    ]
  },
  "Storybook default": {
    "scope": "typescriptreact",
    "prefix": "sd",
    "body": [
      "import type { Meta, StoryObj } from '@storybook/react';",
      "const meta = {",
      "\tcomponent: () => <div></div>,",
      "} satisfies Meta<T>;",
      "",
      "export default meta;",
      "",
      "type Story = StoryObj<typeof meta>;",
      "",
      "export const Default: Story = {",
      "\targs: {},",
      "};"
    ]
  }
}
